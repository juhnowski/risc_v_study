# Написать программу, на вход которой построчно подаются:
# Натуральное число N — размер целочисленного массива, адрес которого должен быть равен 0x10010000 (начало области .data)
# Затем N целых чисел — элементы массива
# Затем — неизвестное число пар целых чисел A, B: 0⩽A⩽B<N — индексы массива, по одному в строке
# Конец ввода — пара целых чисел A, B: A>B, не учитывается
# Для каждой пары A⩽B программа выводит наименьший элемент массива в диапазоне от A до B включительно, пробел, адрес элемента и перевод строки
# В программе предусмотреть подпрограмму minaddr,
# которой в a0 передаётся адрес массива, в a1 — A, в a2 — B,
# а возвращает она в a0 — наименьшее значение массива в диапазоне, а в a1 — адрес элемента, где был найден минимум (если таких несколько, то с наименьшим индексом)

# индексы в массиве с 1

.data
start:	.word 0

.text
	la	s0 start	# s0 - адрес элемента в массиве
	li	a7 5
	ecall
	mv	s1 a0		# s1 = N - размер целочисленного массива
	mv	t0 a0		# цикл по t0
	addi	t1 zero -1
loop:	ecall
	sw	a0 (s0)
	addi	s0 s0 4
	add	t0 t0 t1	
	bgt	t0 zero loop
	
next:	li	a7 5
	ecall
	mv 	a1 a0	# индекс начала поиска минимального значения
	ecall
	mv 	a2 a0	# индекс конца поиска минимального значения
	bgt  	a1 a2 end
	la 	a0 start
	jal minaddr
	jal print	
	b next
	
end:	li	a7 10		# завершаем программу
	ecall	
	
minaddr:addi    sp sp -12       ## Выделяем две ячейки — под ra и s0
	sw	ra -8(sp)        ## Сохраняем ra	
	sw	s0 -4(sp)
	sw	s1 (sp)
	
	# сдвинуть интервал на 1
	addi	a1 a1 -1
	addi	a2 a2 -1
	
	mv	s0 zero		# s0 - минимальное значение
	mv	t1 zero
	addi	t1 t1 4
	mul	t2 t1 a1
	add	a0 a0 t2 	# теперь a0 показывает на начало поиска 
	lw	s0 (a0)		# принимаем первое значение минимальным 
	mv	s1 a0		# s1 - адрес минимального значения
search:	bgt 	a0 s0 s_next
	mv	s0 a0
	mv	s1 a0
s_next:	addi 	a0 a0 4
	addi	a1 a1 1
	bge 	a2 a1 search
	
	mv	a0 s0
	mv	a1 s1
	
	lw	s1 (sp)
	lw	s0 -4(sp)
	lw      ra -8(sp)         # Восстанавливаем ra
        addi    sp sp 12         # Освобождаем две ячейки стека
	ret

print:	addi    sp sp -4       ## Выделяем две ячейки — под ra и s0
	sw	ra (sp)        ## Сохраняем ra
	
	li      a7 1
	ecall
	
	addi	a0 zero 0x20
	li      a7 11
	ecall
	
	mv	a0 a1
	li      a7 34
	ecall
	
	li      a7 11           # Выведем перевод строки
        li      a0 10
        ecall
      
      	lw      ra (sp)         # Восстанавливаем ra
        addi    sp sp 4         # Освобождаем две ячейки стека
        ret


